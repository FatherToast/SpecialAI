buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// The mod's version and id
version = '1.17.1-2.0.1'
archivesBaseName = 'specialai'
group = "fathertoast.${archivesBaseName}"

// Versions for mods to include at runtime during development
def jei_version = '1.17.1:8.1.0.23'
def top_version = '1.17:4.0.2'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: '1.17.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                specialai {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                specialai {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'specialai', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                specialai {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Repos for mods to include during development
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.84'

    // Add in JEI and TOP to assist debugging during development
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    // 1.17 version is currently not on the maven repo
    //runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}")
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}