buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '[6.0,6.2)', changing: true
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'

// The mod's version and id
version = "${mc_version}-${mod_version}"
archivesBaseName = 'specialai'
group = "fathertoast.${archivesBaseName}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: "${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                specialai {
                    source sourceSets.main
                }
            }
        }

        client {
            property "mixin.debug.export", "true"
            property 'mixin.env.disableRefMap', 'true'
        }

        server {
            property "mixin.debug.export", "true"
            property 'mixin.env.disableRefMap', 'true'
        }

        data {
            args '--mod', 'specialai', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Crust; only implement the api, but include the entire mod at runtime
    implementation "curse.maven:crust-873570:${crust_api_version}"
    runtimeOnly "curse.maven:crust-873570:${crust_src_version}"

    // Add in JEI and TOP to assist debugging during development
    runtimeOnly fg.deobf("curse.maven:jei-238222:${jei_version}")
    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Special AI",
                "Specification-Vendor"    : "FatherToast",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "FatherToast",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                //"MixinConfigs"            : "specialai.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}